//lintr from https://gist.github.com/sajoy/05ede1c681bfa59d1295f55290c7a795 \\


{
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "templateStrings": true, // enable template strings
  },

  "env": {
    "browser": true,     // browser global variables.
    "node": true,        // Node.js global variables and Node.js-specific rules.
    "jquery": true,      // jquery global variables.
    "es6": true
  },

  "globals": {
    // e.g. "angular": true
    "app": true,
    "page": true
  },

  "rules": {
    ////////// Possible Errors //////////
    
    "comma-dangle": 1,         // disallow trailing commas in object literals
    "no-debugger": 1,             // disallow use of debugger
    "no-dupe-keys": 1,            // disallow duplicate keys when creating object literals
    "no-extra-parens": 2,         // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,           // disallow unnecessary semicolons
    "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
    "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement


    ////////// Best Practices //////////

    "curly": 2,                 // specify curly brace conventions for all control statements
    "default-case": 2,          // require default case in switch statements (off by default)
    "dot-notation": 1,          // encourages use of dot notation whenever possible
    "eqeqeq": 2,                // require the use of === and !==
    "no-alert": 1,              // disallow the use of alert, confirm, and prompt
    "no-loop-func": 1,          // disallow creation of functions within loops
    "no-multi-spaces": 2,       // disallow use of multiple spaces
    "no-redeclare": 2,          // disallow declaring the same variable more then once
    "vars-on-top": 1,           // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 1,             // require immediate function invocation to be wrapped in parentheses (off by default)


    ////////// Strict Mode //////////

    "strict": 2,          // controls location of Use Strict Directives


    ////////// Variables //////////

    "no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined": 2,                // disallow use of undefined variable (off by default)
    "no-unused-vars": 2,              // disallow declaration of variables that are not used in the code


    ////////// Stylistic Issues //////////

    "camelcase": 1,                 // require camel case names
    "key-spacing": 1,               // enforces spacing between keys and values in object literal properties
    "new-cap": 2,                   // require a capital letter for constructors
    "new-parens": 2,                // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-mixed-spaces-and-tabs": 2,  // disallow mixed spaces and tabs for indentation
    "no-nested-ternary": 1,         // disallow nested ternary expressions (off by default)
    "semi-spacing": 1,      // disallow space before semicolon
    "no-trailing-spaces": 2,        // disallow trailing whitespace at the end of lines
    "quotes": [2, "single"],                    // specify whether double or single quotes should be used
    "space-infix-ops": 2,           // require spaces around operators
    "keyword-spacing": 2,   // require a space after return, throw, and case


    ////////// ECMAScript 6 //////////

    "no-var": 0,          // require let or const instead of var (off by default)

  }
}